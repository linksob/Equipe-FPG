/*
 * Copyright (c) 1993-1997, Silicon Graphics, Inc.
 * ALL RIGHTS RESERVED
 * Permission to use, copy, modify, and distribute this software for
 * any purpose and without fee is hereby granted, provided that the above
 * copyright notice appear in all copies and that both the copyright notice
 * and this permission notice appear in supporting documentation, and that
 * the name of Silicon Graphics, Inc. not be used in advertising
 * or publicity pertaining to distribution of the software without specific,
 * written prior permission.
 */

#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <stdlib.h>

float year = 0, day = 0, revolution = 0;
static int view = 15;

void reshape(int w,int h)
{
	//glViewport (0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode(GL_PROJECTION);
	//glLoadIdentity();
    gluPerspective(60.0, (GLfloat) w/(GLfloat) h, 1.0, 20.0);
	glMatrixMode(GL_MODELVIEW);
	//glLoadIdentity();
}

void drawSystem()
{
   gluLookAt (0, view, 3, 0.0, 0.0, 0.0, 0, 1.0, 0); //posição da câmera
   glColor3f(1.0, 1.0, 0.0);
   glPushMatrix();
   //glTranslatef(0,0,-4);
   glutWireSphere(1.0, 20, 16);   /* draw sun */
   glRotatef ((GLfloat) year, 0.0, 1.0, 0.0);
   glTranslatef (2.0, 0.0, 0.0);
   glColor3f(0.0, 0.0, 1.0);
   glRotatef ((GLfloat) day, 0.0, 1.0, 0.0);
   glutWireSphere(0.4, 20, 16);    /* draw earth */
   glTranslatef (0.6, 0.0, 0.0);
   glColor3f(1.0, 1.0, 1.0);
   glutWireSphere(0.1, 20, 16);  /* draw moon */
   glRotatef ((GLfloat) revolution, 0.0, 1.0, 0.0);
   glPopMatrix();

   //incremento na translação da terra (em torno do sol
   year = year + 0.01;
   if(year > 360) year = year - 360;

   //incremento na rotação da terra
   day = day + 0.05;
   if(day > 360) day = day - 360;

   //incremento na translação da lua (em torno da terra)
   revolution = revolution + 0.03;
   if(revolution > 360) revolution = revolution - 360;
}

void display(void)
{
   	glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); //limpa cada posição anterior
   	glClearColor (0.0,0.0,0.0,1.0);
   	glLoadIdentity();
   	drawSystem();
   	glutSwapBuffers(); //swap the buffers
}

void keyboard (unsigned char key, int x, int y)
{
   switch (key) {
      case 'v':
          if(view == 0){
            view = 15;
          }else{
            view = 0;
          }
          break;
      case 27:
         exit(0);
         break;
      default:
         break;
   }
}

int main(int argc, char** argv)
{
   glutInit(&argc, argv);
   //glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
   glutInitWindowSize (1000, 1000);
   glutInitWindowPosition (100, 100);
   glutCreateWindow (argv[0]);
   glutDisplayFunc(display);
   glutReshapeFunc(reshape);
   glutKeyboardFunc(keyboard);
   glutIdleFunc(display);
   glutMainLoop();
   return 0;
}
